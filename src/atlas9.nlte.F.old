      module nlte_module

      implicit none

      logical, dimension(30) ::    nlte

      integer, dimension(30)    :: nis

      integer, dimension(30, 3) :: nol

      real*8, allocatable, dimension(:) ::       bHII

      real*8, allocatable, dimension(:, :, :) :: bC
      real*8, allocatable, dimension(:, :, :) :: bMg
      real*8, allocatable, dimension(:, :, :) :: bAl
      real*8, allocatable, dimension(:, :, :) :: bSi
      real*8, allocatable, dimension(:, :, :) :: bFe

      contains

      subroutine nlte_elem(nrhox)

      use file_operations
      use utils

      integer, intent(in)       :: nrhox

      integer                   :: un, io, i

      character (len = 150)     :: line

      logical                   :: some_elements_are_in_nlte, in_nlte

      nlte(1 : 30) = .false.

      allocate(bHII(nrhox))

      un = get_file_unit(1400)

      open(unit = un, file = 'istageinfo.inp', action = 'read')

      read(un, *) (nis(i), nol(i, 1), nol(i, 2), nol(i, 3), i = 1, 30)

      close(un)

      allocate(bC (maxval(nis), maxval(nol(6, :)),  nrhox))
      allocate(bMg(maxval(nis), maxval(nol(12, :)), nrhox))
      allocate(bAl(maxval(nis), maxval(nol(13, :)), nrhox))
      allocate(bSi(maxval(nis), maxval(nol(14, :)), nrhox))
      allocate(bFe(maxval(nis), 48,                 nrhox))

      bHII = 1.0d0

      bC   = 1.0d0
      bMg  = 1.0d0
      bAl  = 1.0d0
      bSi  = 1.0d0
      bFe  = 1.0d0

      inquire(file = nlte_file, exist = some_elements_are_in_nlte)

      if (some_elements_are_in_nlte) then

          un = get_file_unit(1500)

          open(unit = un, file = nlte_file, action = 'read')

          io = 0

          do while (io == 0)

             read(un, '(A)', iostat = io) line

             if (io /= 0) exit

             if (index(line, 'ELEMENT') /= 0) then

                in_nlte = index(line, 'NLTE') /= 0

                if (index(line, 'HYDROGEN') /= 0 .and. in_nlte) nlte(1)  = .true.
                if (index(line, 'HELIUM')   /= 0 .and. in_nlte) nlte(2)  = .true.
                if (index(line, 'LITHIU')   /= 0 .and. in_nlte) nlte(3)  = .true.
                if (index(line, 'BERRYL')   /= 0 .and. in_nlte) nlte(4)  = .true.
                if (index(line, 'BOR')      /= 0 .and. in_nlte) nlte(5)  = .true.
                if (index(line, 'CARBON')   /= 0 .and. in_nlte) nlte(6)  = .true.
                if (index(line, 'NITROG')   /= 0 .and. in_nlte) nlte(7)  = .true.
                if (index(line, 'OXYGEN')   /= 0 .and. in_nlte) nlte(8)  = .true.
                if (index(line, 'FLUOR')    /= 0 .and. in_nlte) nlte(9)  = .true.
                if (index(line, 'NEON')     /= 0 .and. in_nlte) nlte(10) = .true.
                if (index(line, 'NATRIUM')  /= 0 .and. in_nlte) nlte(11) = .true.
                if (index(line, 'MAGNES')   /= 0 .and. in_nlte) nlte(12) = .true.
                if (index(line, 'ALUMIN')   /= 0 .and. in_nlte) nlte(13) = .true.
                if (index(line, 'SILICON')  /= 0 .and. in_nlte) nlte(14) = .true.
                if (index(line, 'PHOSPH')   /= 0 .and. in_nlte) nlte(15) = .true.
                if (index(line, 'SULPHUR')  /= 0 .and. in_nlte) nlte(16) = .true.
                if (index(line, 'CHLOR')    /= 0 .and. in_nlte) nlte(17) = .true.
                if (index(line, 'ARGON')    /= 0 .and. in_nlte) nlte(18) = .true.
                if (index(line, 'POTASS')   /= 0 .and. in_nlte) nlte(19) = .true.
                if (index(line, 'CALCIUM')  /= 0 .and. in_nlte) nlte(20) = .true.
                if (index(line, 'SCANDI')   /= 0 .and. in_nlte) nlte(21) = .true.
                if (index(line, 'TITAN')    /= 0 .and. in_nlte) nlte(22) = .true.
                if (index(line, 'VANADI')   /= 0 .and. in_nlte) nlte(23) = .true.
                if (index(line, 'CHROM')    /= 0 .and. in_nlte) nlte(24) = .true.
                if (index(line, 'MANGAN')   /= 0 .and. in_nlte) nlte(25) = .true.
                if (index(line, 'IRON')     /= 0 .and. in_nlte) nlte(26) = .true.
                if (index(line, 'COBALT')   /= 0 .and. in_nlte) nlte(27) = .true.
                if (index(line, 'NICKEL')   /= 0 .and. in_nlte) nlte(28) = .true.
                if (index(line, 'COPPER')   /= 0 .and. in_nlte) nlte(29) = .true.
                if (index(line, 'ZINC')     /= 0 .and. in_nlte) nlte(30) = .true.

             endif

          enddo

          close(un)

      endif

      return

      end

      subroutine nlte_depart(nrhox)

      include 'common.stateb'
      include 'common.depart'

      integer, intent(in) :: nrhox

      real*8, dimension(nrhox) :: val

      integer :: n

      call nlte_lev(nrhox, 'ELECTR', 'pop', val)

      xne(1 : nrhox) = xnatom(1 : nrhox) * val(1 : nrhox)

!------------- NLTE DEPARTURES ----------------------

!---------------- HYDROGEN ----------------------

      if (nlte(1)) then

         call nlte_lev(nrhox, 'HMINUS', 'dep', bmin)

         do n = 1, 8

            call nlte_lev(nrhox, 'HI'//str(n), 'dep', val)

            bhyd(1 : nrhox, n) = val(1 : nrhox)

         enddo

         call nlte_lev(nrhox, 'HII', 'dep', bHII)

      endif

!---------------- CARBON -------------------------

      if (nlte(6)) then

         do n = 1, nol(6, 1)

            call nlte_lev(nrhox, 'CI'//str(n), 'dep', val)

            bCI(n, 1 : nrhox) = val(1 : nrhox)

         enddo

         call nlte_lev(nrhox, 'CII1', 'dep', bCII)

      endif

!---------------- MAGNESIUM -------------------------

      if (nlte(12)) then

         do n = 1, nol(12, 1)

            call nlte_lev(nrhox, 'MgI'//str(n), 'dep', val)

            bMgI(n, 1 : nrhox) = val(1 : nrhox)

         enddo

         call nlte_lev(nrhox, 'MgII1', 'dep', bMgII)

      endif

!---------------- ALUMINUM -------------------------

      if (nlte(13)) then

         call nlte_lev(nrhox, 'AlI1',  'dep', bAlI)

         call nlte_lev(nrhox, 'AlII1', 'dep', bAlII)

      endif

!---------------- SILICON -------------------------

      if (nlte(14)) then

         do n = 1, nol(14, 1)

            call nlte_lev(nrhox, 'SiI'//str(n), 'dep', val)

            bSiI(n, 1 : nrhox) = val(1 : nrhox)

         enddo

         call nlte_lev(nrhox, 'SiII1', 'dep', bSiII)

      endif

!---------------- IRON -------------------------

      if (nlte(26)) then

         do n = 1, nol(26, 1)

            call nlte_lev(nrhox, 'FeI'//str(n), 'dep', val)

            bFeI(n, 1 : nrhox) = val(1 : nrhox)

         enddo

         call nlte_lev(nrhox, 'FeII1', 'dep', bFeII)

      endif

!-----------------------------------------------------------------

      end

      subroutine nlte_lev(nrhox, levname, mode, val)

      implicit none

      integer, intent(in) :: nrhox

      character (len = *), intent(in) :: levname

      character (len = 3), intent(in) :: mode

      real*8, dimension(nrhox), intent(out) :: val

      real*8, allocatable, dimension(:) :: val1, val2, val3, val4, val5

      character (len = 10000) :: s

      integer :: un, j

      allocate(val1(nrhox))
      allocate(val2(nrhox))
      allocate(val3(nrhox))
      allocate(val4(nrhox))
      allocate(val5(nrhox))

      un = 1845

      open(unit = un, file = 'nltepop/'//levname, action = 'read')

      read(un, *) s

      read(un, *) (val1(j), val2(j), val3(j), val4(j), val5(j),
     $             j = 1, nrhox)

      close(un)

      if (mode == 'pop') val(1 : nrhox) = val4(1 : nrhox)

      if (mode == 'dep') val(1 : nrhox) = val5(1 : nrhox)

      if (mode /= 'pop' .and. mode /= 'dep')
     $   stop 'subroutine nlte_lev: mode is not recognized'

      deallocate(val1)
      deallocate(val2)
      deallocate(val3)
      deallocate(val4)
      deallocate(val5)

      return

      end

      end module
